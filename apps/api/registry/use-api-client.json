{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-api-client",
  "type": "registry:hook",
  "title": "API Client Hook",
  "description": "React hook for API client that handles fetch requests with Supabase authentication",
  "dependencies": [
    "@supabase/supabase-js@latest",
    "react@^18.0.0"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/hooks/use-api-client.ts",
      "content": "import type { SupabaseClient } from '@supabase/supabase-js'\nimport { useCallback, useMemo, useState } from 'react'\n\ntype ApiClientConfig = {\n  apiUrl?: string\n  supabaseClient: SupabaseClient\n}\n\ntype FetchOptions<T> = {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE'\n  body?: T\n  headers?: Record<string, string>\n  stream?: boolean\n}\n\ntype ApiState = {\n  isLoading: boolean\n  error: Error | null\n}\n\n/**\n * React hook for API client that handles fetch requests with Supabase authentication\n */\nexport function useApiClient(config: ApiClientConfig) {\n  const [state, setState] = useState<ApiState>({\n    isLoading: false,\n    error: null,\n  })\n\n  const apiUrl = config.apiUrl\n  const supabase = config.supabaseClient\n\n  const fetchApi = useCallback(\n    async <T, S>(endpoint: string, options: FetchOptions<T> = {}): Promise<S> => {\n      const { method = 'GET', body, headers = {}, stream = false } = options\n      setState((prev) => ({ ...prev, isLoading: true, error: null }))\n\n      try {\n        const defaultHeaders: Record<string, string> = {}\n\n        if (!(body instanceof FormData)) {\n          defaultHeaders['Content-Type'] = 'application/json'\n        }\n\n        if (supabase) {\n          const {\n            data: { session },\n          } = await supabase.auth.getSession()\n          if (session?.access_token) {\n            defaultHeaders.Authorization = `Bearer ${session.access_token}`\n          }\n        }\n\n        const res = await fetch(`${apiUrl}${endpoint}`, {\n          method,\n          headers: {\n            ...defaultHeaders,\n            ...headers,\n          },\n          body: body instanceof FormData ? body : body ? JSON.stringify(body) : undefined,\n          credentials: 'include',\n        })\n\n        if (!res.ok) {\n          const error = await res.json().catch(() => ({}))\n          const errorMessage = error.message || `HTTP ${res.status}: ${res.statusText}`\n          const errorWithStatus = new Error(errorMessage)\n          ;(errorWithStatus as Error & { status: number }).status = res.status\n          throw errorWithStatus\n        }\n\n        if (stream) {\n          setState((prev) => ({ ...prev, isLoading: false }))\n          return res as unknown as S\n        }\n\n        const data = (await res.json()) as S\n        setState((prev) => ({ ...prev, isLoading: false }))\n        return data\n      } catch (error) {\n        setState((prev) => ({\n          ...prev,\n          isLoading: false,\n          error: error instanceof Error ? error : new Error('An unknown error occurred'),\n        }))\n        throw error\n      }\n    },\n    [apiUrl, supabase]\n  )\n\n  const api = useMemo(\n    () => ({\n      get: <body, returnType>(\n        endpoint: string,\n        options?: Omit<FetchOptions<body>, 'method' | 'body'>\n      ) => fetchApi<body, returnType>(endpoint, { ...options, method: 'GET' }),\n\n      post: <T, S>(endpoint: string, data?: T, options?: Omit<FetchOptions<T>, 'method'>) =>\n        fetchApi<T, S>(endpoint, { ...options, method: 'POST', body: data }),\n\n      postStream: <T>(\n        endpoint: string,\n        data: T,\n        options?: Omit<FetchOptions<T>, 'method' | 'stream'>\n      ) =>\n        fetchApi<T, Response>(endpoint, { ...options, method: 'POST', body: data, stream: true }),\n\n      postFormData: <S>(\n        endpoint: string,\n        formData: FormData,\n        options?: Omit<FetchOptions<FormData>, 'method'>\n      ) => fetchApi<FormData, S>(endpoint, { ...options, method: 'POST', body: formData }),\n\n      put: <T, S>(endpoint: string, data: T, options?: Omit<FetchOptions<T>, 'method'>) =>\n        fetchApi<T, S>(endpoint, { ...options, method: 'PUT', body: data }),\n\n      delete: <T, S>(endpoint: string, options?: Omit<FetchOptions<T>, 'method'>) =>\n        fetchApi<T, S>(endpoint, { ...options, method: 'DELETE', body: {} as T }),\n    }),\n    [fetchApi]\n  )\n\n  return {\n    ...api,\n    isLoading: state.isLoading,\n    error: state.error,\n  }\n}\n",
      "type": "registry:hook"
    }
  ],
  "docs": "## Usage\n\n```tsx\nimport { createClient } from '@supabase/supabase-js'\nimport { useApiClient } from './hooks/use-api-client'\n\nconst supabase = createClient(\n  process.env.VITE_SUPABASE_URL!,\n  process.env.VITE_SUPABASE_ANON_KEY!\n)\n\nfunction MyComponent() {\n  const { get, post, put, delete: del, isLoading, error } = useApiClient({\n    apiUrl: 'https://api.example.com',\n    supabaseClient: supabase\n  })\n\n  const handleGetData = async () => {\n    try {\n      const data = await get<null, { users: User[] }>('/users')\n      console.log(data.users)\n    } catch (err) {\n      console.error('Failed to fetch users:', err)\n    }\n  }\n\n  const handleCreateUser = async (userData: CreateUserData) => {\n    try {\n      const newUser = await post<CreateUserData, User>('/users', userData)\n      console.log('User created:', newUser)\n    } catch (err) {\n      console.error('Failed to create user:', err)\n    }\n  }\n\n  return (\n    <div>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>Error: {error.message}</p>}\n      <button onClick={handleGetData}>Fetch Users</button>\n    </div>\n  )\n}\n```\n\n### Features\n\n- **Automatic Supabase Authentication**: Automatically includes authentication headers from Supabase session\n- **TypeScript Support**: Full TypeScript support with generic types for request/response data\n- **Error Handling**: Built-in error handling with detailed error messages and HTTP status codes\n- **Loading States**: Built-in loading state management\n- **Multiple HTTP Methods**: Support for GET, POST, PUT, DELETE operations\n- **FormData Support**: Special handling for FormData uploads\n- **Streaming Support**: Support for streaming responses\n- **Flexible Configuration**: Configurable API URL and Supabase client\n\n### Requirements\n\nYou'll need to set up Supabase in your project and provide a configured Supabase client to the hook."
}
